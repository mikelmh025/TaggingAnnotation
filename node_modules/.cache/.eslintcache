[{"/Users/zeyucheng/Desktop/taggingAnnotation/src/index.js":"1","/Users/zeyucheng/Desktop/taggingAnnotation/src/App.js":"2","/Users/zeyucheng/Desktop/taggingAnnotation/src/reportWebVitals.js":"3","/Users/zeyucheng/Desktop/taggingAnnotation/src/app/store.js":"4","/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/categorySlice.js":"5","/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/dataFetchSlice.js":"6","/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/resultSlice.js":"7","/Users/zeyucheng/Desktop/taggingAnnotation/src/components/DetailSection/DetailSide.componoent.jsx":"8","/Users/zeyucheng/Desktop/taggingAnnotation/src/components/MenuSection/MainMenu.component.jsx":"9"},{"size":442,"mtime":1665640004000,"results":"10","hashOfConfig":"11"},{"size":2301,"mtime":1665969931002,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1665253064228,"results":"13","hashOfConfig":"11"},{"size":354,"mtime":1665967311955,"results":"14","hashOfConfig":"11"},{"size":1148,"mtime":1665640713312,"results":"15","hashOfConfig":"11"},{"size":722,"mtime":1665639904061,"results":"16","hashOfConfig":"11"},{"size":719,"mtime":1665969560808,"results":"17","hashOfConfig":"11"},{"size":4273,"mtime":1665979875694,"results":"18","hashOfConfig":"11"},{"size":3366,"mtime":1666140736145,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g7mnrx",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/Users/zeyucheng/Desktop/taggingAnnotation/src/index.js",[],[],"/Users/zeyucheng/Desktop/taggingAnnotation/src/App.js",["51","52","53"],[],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport DetailSide from './components/DetailSection/DetailSide.componoent';\nimport MainMenu from './components/MenuSection/MainMenu.component';\nimport {getData} from './slices/dataFetchSlice';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const {loading, data, error} = useSelector((state) => state.data);\n\n  const category = useSelector((state) => state.category.data);\n  const [selectCategory, setSelectCategory] = useState({groupName: Object.keys(category)[0], selection: category[Object.keys(category)[0]][0].name});\n  const groupLength = Object.keys(category).length;\n  const [currGroupIndex, setCurrGroupIndex] = useState(0);\n  const [currOptionIndex, setCurrOptionIndex] = useState(0);\n  const [optionLength, setOptionLength] = useState(category[Object.keys(category)[currGroupIndex]].length);\n\n  const handleSelect = (selectObj, groupIndex, optionIndex) => {\n    setSelectCategory(selectObj);\n    setCurrGroupIndex(groupIndex);\n    setCurrOptionIndex(optionIndex);\n    setOptionLength(category[Object.keys(category)[groupIndex]].length);\n  }\n\n  const handleNext = () => {\n    if(currGroupIndex < groupLength && currOptionIndex < optionLength - 1){\n      setCurrOptionIndex(currOptionIndex + 1);\n      setSelectCategory({groupName: Object.keys(category)[currGroupIndex], selection: category[Object.keys(category)[currGroupIndex]][currOptionIndex + 1].name});\n    }\n    else if(currGroupIndex < groupLength - 1  && currOptionIndex === optionLength - 1){\n      setCurrGroupIndex(currGroupIndex + 1);\n      setCurrOptionIndex(0);\n      setOptionLength(category[Object.keys(category)[currGroupIndex + 1]].length);\n      setSelectCategory({groupName: Object.keys(category)[currGroupIndex + 1], selection: category[Object.keys(category)[currGroupIndex + 1]][0].name});\n    }\n    else{\n      return;\n    }\n  }\n\n  useEffect(() => {\n    dispatch(getData());\n  }, [])\n\n\n  return (\n    <div className='main'>\n      <MainMenu onSelect={handleSelect} selectCategory={selectCategory} groupIndex={currGroupIndex} optionIndex={currOptionIndex}/>\n      <DetailSide selectCategory={selectCategory} onNextClick={handleNext} data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/zeyucheng/Desktop/taggingAnnotation/src/reportWebVitals.js",[],[],"/Users/zeyucheng/Desktop/taggingAnnotation/src/app/store.js",[],[],"/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/categorySlice.js",[],[],"/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/dataFetchSlice.js",[],[],"/Users/zeyucheng/Desktop/taggingAnnotation/src/slices/resultSlice.js",["54"],[],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nconst resultSlice = createSlice({\n  name: 'results',\n  initialState: {\n    results: [],\n  },\n  reducers: {\n    addResult: (state,action) => {\n        const resultObj = action.payload\n        const found = state.results.find((e) => e.group === resultObj.group && e.category === resultObj.category)\n        if(found){\n            found.selection = resultObj.selection;\n            found.time = resultObj.time;\n        }else{\n            state.results.push(resultObj);\n        }\n        console.log(state.results);\n        // state.results.push(resultObj);\n    }\n  },\n});\n\nexport const {addResult} = resultSlice.actions\n\nexport default resultSlice.reducer;","/Users/zeyucheng/Desktop/taggingAnnotation/src/components/DetailSection/DetailSide.componoent.jsx",["55","56"],[],"import React, { useEffect, useState } from \"react\";\nimport './detailSide.styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isChecked } from \"../../slices/categorySlice\";\nimport data from '../../asset/data.json';\nimport { addResult } from \"../../slices/resultSlice\";\n\nconst DetailSide = (props) => {\n    const selectObj = props.selectCategory;\n    const dispatch = useDispatch();\n    const results = useSelector((state) => state.results)\n    const options = data[selectObj.groupName][selectObj.selection];\n    const [selectItem, setSelectItem] = useState(null);\n    const [selectIndex, setSelectIndex] = useState(null);\n    const [startTime, setStartTime] = useState(null);\n    // const [selectItemArray, setSelectArray] = useState([]);\n\n    const renderOptions = Object.keys(options).map((item, index) => {\n        const option = options[item]\n        return item !== 'description' && item !== 'url' && ( \n            <div\n                className=\"optionItem\"\n                key={index}\n                onClick={() => {\n                    setSelectItem(item);\n                    setSelectIndex(index);\n                    expectHandler();\n                }}\n                style={{\n                    border: selectIndex === index && '2px solid blue',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItem: 'center',\n                    justifyContent: 'start',\n                }}\n            >\n                <h4 style={{textAlign: 'center', margin: 15,}}>{option.title}</h4>\n                <img src={option.url} alt=\"option\" className=\"optionImg\" style={{alignSelf: 'center'}}/>\n                <p className=\"optionDescription\">{option.description}</p>\n            </div>\n        );\n    });\n\n    const expectHandler = () => {\n        const expectObj = {[selectObj.groupName]: {[selectObj.selection]: selectItem}};\n\n\n        \n    }\n\n    // const renderExpectItem = Object.keys(expectItem).map((item, index) => {\n    //     const sample = expectItem[item];\n    //     return (\n    //         <div className=\"sampleItem\" key={index}>{sample.url}</div>\n    //     )\n    // }\n\n    useEffect(() => {\n        setStartTime(new Date().getTime());\n    }, [selectObj])\n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"headerContainer\">\n                <img src={data[selectObj.groupName].url} alt=\"Category\" className=\"groupImage\"/>\n                <div className=\"groupTextContainer\">\n                    <p className=\"groupText\">{options.description}</p>\n                </div>\n            </div>\n            <div className=\"mainTitleContainer\">\n                <h2 className=\"tileContainer\">{data[selectObj.groupName].description}</h2>\n                <img src={options.url} alt=\"selection\" className=\"toolImage\" />\n            </div>\n            <div className=\"optionSection\">\n                {renderOptions}\n            </div>\n            {/* <div className=\"mainTitleContainer\">\n                <h3 className=\"tileContainer\">Does this group statisfy your expect ?</h3>\n            </div>\n            <div className=\"optionSection\">\n                {renderExpectItem}\n            </div> */}\n            {selectItem ?\n                <button className=\"nextButton\"\n                    onClick={() => {\n                        const endTime = new Date().getTime();\n                        const diffTime = endTime - startTime;\n                        const resultObj = {\n                            group: selectObj.groupName,\n                            category: selectObj.selection,\n                            selection: selectItem,\n                            time: diffTime,\n                        }\n                        dispatch(isChecked({ groupName: selectObj.groupName, selection: selectObj.selection }));\n                        dispatch(addResult(resultObj));\n                        props.onNextClick();\n                        setSelectItem(null);\n                        setSelectIndex(null);\n                    }}\n                >Yes, Next</button> :\n                <button className=\"nextButton\" disabled\n                >Please annotate the hair style</button>\n            }\n        </div>\n    )\n}\n\nexport default DetailSide;","/Users/zeyucheng/Desktop/taggingAnnotation/src/components/MenuSection/MainMenu.component.jsx",["57"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./mainMenu.styles.css\";\nimport { useSelector } from 'react-redux';\n\nconst MainMenu = (props) => {\n    const category = useSelector((state) => state.category.data);\n    const results = useSelector((state) => state.results);\n    const [list, setList] = useState(category);\n    const [select, setSelect] = useState(props.selectCategory);\n    const [selectIndex, setSelectIndex] = useState(props.groupIndex);\n    const [selectItemIndex, setSelectItemIndex] = useState(props.optionIndex);\n    const [mainImg, setMainImg] = useState('');\n\n    const renderList = Object.keys(list).map((item, index) => {\n        const renderItems = list[item].map((selection, itemIndex) => {\n            return (\n                <button\n                    className='selectionButton'\n                    key={itemIndex}\n                    onClick={() => {\n                        setSelect({ groupName: item, selection: selection.name });\n                        props.onSelect({ groupName: item, selection: selection.name }, index, itemIndex);\n                        setSelectIndex(index);\n                        setSelectItemIndex(itemIndex);\n                    }}\n                    style={{\n                        background: selection.check && \"#78A55A\",\n                        color: selection.check && '#fff',\n                        borderStyle: selectIndex === index && selectItemIndex === itemIndex && 'solid',\n                    }}\n                >\n                    {selection.name}\n                </button>\n            );\n        });\n        return (\n            <div className=\"groupContainer\" key={index}>\n                <h2 className=\"groupTitle\">{item}: </h2>\n                <div className=\"selectorContainer\">\n                    {renderItems}\n                </div>\n            </div>\n        )\n    });\n\n    const checkAllCategory = () => {\n        let allChecked = true;\n        Object.keys(list).map((item) => {\n            return list[item].map((element) => {\n                if (!element.check) {\n                    allChecked = false;\n                }\n                return allChecked;\n            });\n        })\n        return allChecked;\n    }\n\n    useEffect(() => {\n        setList(category);\n    }, [category])\n\n    useEffect(() => {\n        setSelectIndex(props.groupIndex);\n        setSelectItemIndex(props.optionIndex);\n    }, [props.groupIndex, props.optionIndex]);\n\n    window.addEventListener('message', function (e) {\n        if (typeof e.data === 'string') {\n            setMainImg(e.data);\n        }\n    })\n\n    return (\n        <div className=\"container\">\n            {mainImg ? \n                <img src={mainImg} className=\"image\" alt=\"main to annotation\" />\n                :\n                <div className=\"image\"></div>\n            }\n            <div className=\"ListContainer\">\n                {renderList}\n            </div>\n            {checkAllCategory() ?\n                <button className=\"submitButton\"\n                    onClick={() => {\n                        const resultsJson = JSON.stringify(results.results)\n                        window.parent.postMessage(resultsJson, '*')\n                    }}>Submit</button> :\n                <button className=\"submitButton\" disabled>Submit</button>\n            }\n\n        </div>\n    );\n}\n\nexport default MainMenu;",{"ruleId":"58","severity":1,"message":"59","line":11,"column":10,"nodeType":"60","messageId":"61","endLine":11,"endColumn":17},{"ruleId":"58","severity":1,"message":"62","line":11,"column":25,"nodeType":"60","messageId":"61","endLine":11,"endColumn":30},{"ruleId":"63","severity":1,"message":"64","line":45,"column":6,"nodeType":"65","endLine":45,"endColumn":8,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"67","line":1,"column":23,"nodeType":"60","messageId":"61","endLine":1,"endColumn":39},{"ruleId":"58","severity":1,"message":"68","line":11,"column":11,"nodeType":"60","messageId":"61","endLine":11,"endColumn":18},{"ruleId":"58","severity":1,"message":"69","line":45,"column":15,"nodeType":"60","messageId":"61","endLine":45,"endColumn":24},{"ruleId":"58","severity":1,"message":"70","line":9,"column":12,"nodeType":"60","messageId":"61","endLine":9,"endColumn":18},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["71"],"'createAsyncThunk' is defined but never used.","'results' is assigned a value but never used.","'expectObj' is assigned a value but never used.","'select' is assigned a value but never used.",{"desc":"72","fix":"73"},"Update the dependencies array to be: [dispatch]",{"range":"74","text":"75"},[1997,1999],"[dispatch]"]